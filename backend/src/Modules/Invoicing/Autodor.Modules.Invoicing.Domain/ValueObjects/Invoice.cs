namespace Autodor.Modules.Invoicing.Domain.ValueObjects;

/// <summary>
/// Represents an invoice data structure for external invoicing systems integration.
/// This record serves as an immutable container for invoice information that will be
/// transmitted to external invoice providers (iFirma, inFakt) for invoice generation.
/// The invoice is not persisted in the local database - it exists only as a data transfer object.
/// </summary>
public record Invoice
{
    /// <summary>
    /// Invoice number, may be null if auto-generated by external system
    /// </summary>
    public int? Number { get; init; }

    /// <summary>
    /// Date when the invoice was issued
    /// </summary>
    public required DateTime IssueDate { get; init; }

    /// <summary>
    /// Date when the sale transaction occurred
    /// </summary>
    public required DateTime SaleDate { get; init; }

    /// <summary>
    /// Due date for payment - defaults to 14 days after issue date
    /// </summary>
    public DateTime PaymentDue { get; init; }

    /// <summary>
    /// Method of payment - defaults to "transfer"
    /// </summary>
    public string PaymentMethod { get; init; } = "transfer";

    /// <summary>
    /// Location where the invoice was issued - defaults to "Katowice"
    /// </summary>
    public string PlaceOfIssue { get; init; } = "Katowice";

    /// <summary>
    /// Additional notes or comments for the invoice
    /// </summary>
    public string Notes { get; init; } = "";

    /// <summary>
    /// Contractor information formatted for invoice purposes
    /// </summary>
    public required Contractor Contractor { get; init; }

    /// <summary>
    /// Collection of items included in this invoice
    /// </summary>
    public required IReadOnlyList<InvoiceItem> Items { get; init; }

    /// <summary>
    /// Gets the total net amount (before VAT) for all items in the invoice.
    /// </summary>
    public decimal TotalNet => Items.Sum(i => i.TotalNet);

    /// <summary>
    /// Gets the total VAT amount for all items in the invoice.
    /// </summary>
    public decimal TotalVat => Items.Sum(i => i.VatAmount);

    /// <summary>
    /// Gets the total gross amount (including VAT) for all items in the invoice.
    /// </summary>
    public decimal TotalGross => Items.Sum(i => i.TotalGross);
};