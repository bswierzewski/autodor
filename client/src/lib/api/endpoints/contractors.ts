/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Web
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../axios';
import type {
  Contractor,
  CreateContractorCommand,
  DeleteContractorCommand,
  UpdateContractorCommand,
  Void
} from '../models';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getContractor = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<Contractor>({ url: `/api/Contractors/${id}`, method: 'GET', signal }, options);
};

export const getGetContractorQueryKey = (id: number) => {
  return [`/api/Contractors/${id}`] as const;
};

export const getGetContractorQueryOptions = <TData = Awaited<ReturnType<typeof getContractor>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContractor>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContractorQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContractor>>> = ({ signal }) =>
    getContractor(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getContractor>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetContractorQueryResult = NonNullable<Awaited<ReturnType<typeof getContractor>>>;
export type GetContractorQueryError = unknown;

export const useGetContractor = <TData = Awaited<ReturnType<typeof getContractor>>, TError = unknown>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContractor>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetContractorQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const updateContractor = (
  id: number,
  updateContractorCommand: UpdateContractorCommand,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Void>(
    {
      url: `/api/Contractors/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateContractorCommand
    },
    options
  );
};

export const getUpdateContractorMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateContractor>>,
    TError,
    { id: number; data: UpdateContractorCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateContractor>>,
  TError,
  { id: number; data: UpdateContractorCommand },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateContractor>>,
    { id: number; data: UpdateContractorCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateContractor(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateContractorMutationResult = NonNullable<Awaited<ReturnType<typeof updateContractor>>>;
export type UpdateContractorMutationBody = UpdateContractorCommand;
export type UpdateContractorMutationError = unknown;

export const useUpdateContractor = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateContractor>>,
    TError,
    { id: number; data: UpdateContractorCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateContractor>>,
  TError,
  { id: number; data: UpdateContractorCommand },
  TContext
> => {
  const mutationOptions = getUpdateContractorMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getContractors = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<Contractor[]>({ url: `/api/Contractors`, method: 'GET', signal }, options);
};

export const getGetContractorsQueryKey = () => {
  return [`/api/Contractors`] as const;
};

export const getGetContractorsQueryOptions = <
  TData = Awaited<ReturnType<typeof getContractors>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContractors>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContractorsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContractors>>> = ({ signal }) =>
    getContractors(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getContractors>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetContractorsQueryResult = NonNullable<Awaited<ReturnType<typeof getContractors>>>;
export type GetContractorsQueryError = unknown;

export const useGetContractors = <TData = Awaited<ReturnType<typeof getContractors>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContractors>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetContractorsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const createContractor = (
  createContractorCommand: CreateContractorCommand,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Void>(
    {
      url: `/api/Contractors`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createContractorCommand
    },
    options
  );
};

export const getCreateContractorMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createContractor>>,
    TError,
    { data: CreateContractorCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createContractor>>,
  TError,
  { data: CreateContractorCommand },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createContractor>>,
    { data: CreateContractorCommand }
  > = (props) => {
    const { data } = props ?? {};

    return createContractor(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateContractorMutationResult = NonNullable<Awaited<ReturnType<typeof createContractor>>>;
export type CreateContractorMutationBody = CreateContractorCommand;
export type CreateContractorMutationError = unknown;

export const useCreateContractor = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createContractor>>,
    TError,
    { data: CreateContractorCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createContractor>>,
  TError,
  { data: CreateContractorCommand },
  TContext
> => {
  const mutationOptions = getCreateContractorMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteContractor = (
  deleteContractorCommand: DeleteContractorCommand,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Void>(
    {
      url: `/api/Contractors`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: deleteContractorCommand
    },
    options
  );
};

export const getDeleteContractorMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContractor>>,
    TError,
    { data: DeleteContractorCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteContractor>>,
  TError,
  { data: DeleteContractorCommand },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteContractor>>,
    { data: DeleteContractorCommand }
  > = (props) => {
    const { data } = props ?? {};

    return deleteContractor(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteContractorMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContractor>>>;
export type DeleteContractorMutationBody = DeleteContractorCommand;
export type DeleteContractorMutationError = unknown;

export const useDeleteContractor = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContractor>>,
    TError,
    { data: DeleteContractorCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteContractor>>,
  TError,
  { data: DeleteContractorCommand },
  TContext
> => {
  const mutationOptions = getDeleteContractorMutationOptions(options);

  return useMutation(mutationOptions);
};
